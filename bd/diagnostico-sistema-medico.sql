-- ================================================
-- SCRIPT DE DIAGN√ìSTICO - Sistema M√©dico
-- ================================================
-- Ejecuta estas queries para verificar que todo est√° correcto

-- 1. Verificar que la tabla medical_conditions tiene datos
SELECT 
  '1. Condiciones m√©dicas' as test,
  COUNT(*) as total,
  CASE WHEN COUNT(*) >= 25 THEN '‚úÖ OK' ELSE '‚ùå FALTAN DATOS' END as status
FROM medical_conditions;

-- 2. Ver todas las condiciones m√©dicas
SELECT * FROM medical_conditions ORDER BY category, name;

-- 3. Verificar que la tabla user_medical_profile existe
SELECT 
  '2. Tabla user_medical_profile' as test,
  COUNT(*) as total_perfiles,
  CASE WHEN COUNT(*) > 0 THEN '‚úÖ OK' ELSE '‚ÑπÔ∏è Sin perfiles a√∫n' END as status
FROM user_medical_profile;

-- 4. Verificar que la funci√≥n existe
SELECT 
  '3. Funci√≥n get_recommended_plants_for_user' as test,
  proname as function_name,
  '‚úÖ OK' as status
FROM pg_proc 
WHERE proname = 'get_recommended_plants_for_user';

-- 5. Verificar columnas en plants
SELECT 
  '4. Columnas m√©dicas en plants' as test,
  column_name,
  data_type,
  CASE 
    WHEN column_name IN ('safe_pregnancy', 'safe_lactation', 'safe_children') THEN '‚úÖ OK'
    WHEN column_name IN ('therapeutic_indications', 'evidence_level') THEN '‚úÖ OK'
    ELSE '‚ö†Ô∏è Verificar'
  END as status
FROM information_schema.columns
WHERE table_name = 'plants'
  AND column_name IN (
    'id',
    'common_name',
    'scientific_name',
    'image_url',
    'therapeutic_indications',
    'safe_pregnancy',
    'safe_lactation',
    'safe_children',
    'evidence_level'
  )
ORDER BY column_name;

-- 6. Verificar tipo de dato de id en plants
SELECT 
  '5. Tipo de dato de plants.id' as test,
  data_type,
  CASE 
    WHEN data_type = 'integer' THEN '‚úÖ OK (INTEGER)'
    WHEN data_type = 'uuid' THEN '‚ö†Ô∏è UUID (ajustar funci√≥n)'
    ELSE '‚ùå Tipo inesperado'
  END as status
FROM information_schema.columns
WHERE table_name = 'plants' AND column_name = 'id';

-- 7. Ver si hay plantas con datos m√©dicos
SELECT 
  '6. Plantas con informaci√≥n m√©dica' as test,
  COUNT(*) as total,
  CASE 
    WHEN COUNT(*) > 0 THEN '‚úÖ OK'
    ELSE '‚ö†Ô∏è Ninguna planta tiene datos m√©dicos a√∫n'
  END as status
FROM plants
WHERE therapeutic_indications IS NOT NULL 
   OR safe_pregnancy IS NOT NULL
   OR safe_lactation IS NOT NULL
   OR safe_children IS NOT NULL;

-- 8. Probar la funci√≥n con un usuario de prueba
-- (Reemplaza 'TU-USER-ID-AQUI' con tu UUID real)
DO $$
DECLARE
  test_user_id UUID;
BEGIN
  -- Obtener el primer usuario
  SELECT id INTO test_user_id FROM auth.users LIMIT 1;
  
  IF test_user_id IS NULL THEN
    RAISE NOTICE '‚ö†Ô∏è No hay usuarios en el sistema';
  ELSE
    RAISE NOTICE '7. Probando funci√≥n con user: %', test_user_id;
    
    -- Intentar llamar la funci√≥n
    PERFORM * FROM get_recommended_plants_for_user(test_user_id);
    
    RAISE NOTICE '‚úÖ Funci√≥n ejecuta correctamente';
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RAISE NOTICE '‚ùå Error al ejecutar funci√≥n: %', SQLERRM;
END $$;

-- 9. Ver detalles de la funci√≥n (firma completa)
SELECT 
  '8. Firma de la funci√≥n' as test,
  pg_get_functiondef(oid) as function_definition
FROM pg_proc
WHERE proname = 'get_recommended_plants_for_user';

-- 10. Verificar pol√≠ticas RLS
SELECT 
  '9. Pol√≠ticas RLS' as test,
  schemaname,
  tablename,
  policyname,
  '‚úÖ OK' as status
FROM pg_policies
WHERE tablename IN ('medical_conditions', 'user_medical_profile')
ORDER BY tablename, policyname;

-- ================================================
-- RESUMEN
-- ================================================
SELECT '=== RESUMEN DE VERIFICACI√ìN ===' as info;

SELECT 
  CASE 
    WHEN (SELECT COUNT(*) FROM medical_conditions) >= 25 THEN '‚úÖ'
    ELSE '‚ùå'
  END || ' Condiciones m√©dicas: ' || (SELECT COUNT(*) FROM medical_conditions)::TEXT as check_1
UNION ALL
SELECT 
  CASE 
    WHEN EXISTS (SELECT 1 FROM pg_proc WHERE proname = 'get_recommended_plants_for_user') THEN '‚úÖ'
    ELSE '‚ùå'
  END || ' Funci√≥n existe' as check_2
UNION ALL
SELECT 
  CASE 
    WHEN EXISTS (
      SELECT 1 FROM information_schema.columns 
      WHERE table_name = 'plants' AND column_name = 'safe_pregnancy'
    ) THEN '‚úÖ'
    ELSE '‚ùå'
  END || ' Columnas m√©dicas en plants' as check_3
UNION ALL
SELECT 
  CASE 
    WHEN (SELECT COUNT(*) FROM plants WHERE therapeutic_indications IS NOT NULL) > 0 THEN '‚úÖ'
    ELSE '‚ö†Ô∏è'
  END || ' Plantas con datos m√©dicos: ' || 
  (SELECT COUNT(*) FROM plants WHERE therapeutic_indications IS NOT NULL)::TEXT as check_4;

-- ================================================
-- ACCIONES RECOMENDADAS
-- ================================================
SELECT '=== PR√ìXIMOS PASOS ===' as info;

-- Si no hay plantas con datos m√©dicos
DO $$
BEGIN
  IF (SELECT COUNT(*) FROM plants WHERE therapeutic_indications IS NOT NULL) = 0 THEN
    RAISE NOTICE 'üìù ACCI√ìN: Agregar datos m√©dicos a algunas plantas';
    RAISE NOTICE 'Ejemplo:';
    RAISE NOTICE 'UPDATE plants SET therapeutic_indications = ''Ayuda digestiva'', safe_pregnancy = true WHERE id = 1;';
  ELSE
    RAISE NOTICE '‚úÖ Hay plantas con datos m√©dicos';
  END IF;
END $$;

-- ================================================
-- QUERY DE PRUEBA MANUAL
-- ================================================
-- Ejecuta esto para probar la funci√≥n directamente
-- (Reemplaza el UUID con tu user_id real)

SELECT 
  '=== PRUEBA MANUAL DE LA FUNCI√ìN ===' as info,
  'Copia y ejecuta esta query con tu user_id:' as instruccion;

SELECT 
  'SELECT * FROM get_recommended_plants_for_user(''TU-USER-ID-AQUI'');' as query_ejemplo;
