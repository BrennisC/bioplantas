import { useEffect, useMemo, useState } from "react";
import { motion } from "framer-motion";
import Modal from "@/components/Modal";
import { supabase, type Plant } from "@/lib/supabase";
import { useToast } from "@/hooks/use-toast";
import { Leaf, Search, Plus, Edit, Trash2, Image as ImageIcon, ExternalLink } from "lucide-react";
import { ConfirmDialog } from "@/components/ConfirmDialog";

export default function PlantsManager() {
  const [plants, setPlants] = useState<Plant[]>([]);
  const [query, setQuery] = useState("");
  const [editing, setEditing] = useState<Plant | null>(null);
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(true);
  const [deleteDialog, setDeleteDialog] = useState<{ open: boolean; id: string; name: string }>({
    open: false,
    id: "",
    name: "",
  });
  const { toast } = useToast();

  useEffect(() => {
    async function fetchPlants() {
      const { data, error } = await supabase
        .from('plants')
        .select('*')
        .order('name');

      if (error) {
        console.error('Error fetching plants:', error);
        return;
      }
      
      console.log('Plants loaded:', data);
      data?.forEach(p => {
        if (p.image) console.log(`${p.name} image URL:`, p.image);
      });
      
      setPlants(data || []);
      setLoading(false);
    }
    fetchPlants();
  }, []);

  const fetchPlants = async () => {
    try {
      const { data, error } = await supabase
        .from('plants')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;
      setPlants(data || []);
    } catch (error: any) {
      console.error('Error fetching plants:', error);
      toast({
        title: "Error al cargar plantas",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    if (!q) return plants;
    return plants.filter((p) =>
      [p.name, p.scientific_name, p.category, p.properties]
        .filter(Boolean)
        .some((v) => (v as string).toLowerCase().includes(q))
    );
  }, [plants, query]);

  const upsert = async (p: Plant) => {
    try {
      // DEBUG: Ver qu√© valores se est√°n enviando
      console.log('üîç Guardando planta con estos valores:');
      console.log('usage_instructions:', p.usage_instructions);
      console.log('warnings:', p.warnings);
      console.log('scientific_article_url:', p.scientific_article_url);
      console.log('Longitud usage_instructions:', p.usage_instructions?.length);
      console.log('Longitud warnings:', p.warnings?.length);
      console.log('Longitud scientific_article_url:', p.scientific_article_url?.length);
      
      if (p.id && plants.find(x => x.id === p.id)) {
        // Update existing
        const updateData = {
          name: p.name,
          scientific_name: p.scientific_name,
          description: p.description,
          category: p.category,
          properties: p.properties,
          image: p.image,
          tags: p.tags,
          ailments: p.ailments,
          scientific_article_url: p.scientific_article_url,
          usage_instructions: p.usage_instructions,
          warnings: p.warnings
        };
        
        console.log('üì¶ Datos que se enviar√°n al UPDATE:', updateData);
        console.log('üÜî ID de la planta:', p.id);
        
        const { data, error } = await supabase
          .from('plants')
          .update(updateData)
          .eq('id', p.id)
          .select();

        console.log('‚úÖ Respuesta del UPDATE:', { data, error });

        if (error) {
          console.error('‚ùå Error al actualizar:', error);
          throw error;
        }

        console.log('‚úÖ Planta actualizada exitosamente en Supabase');

        setPlants(prev => prev.map(x => x.id === p.id ? p : x));
        toast({
          title: "Planta actualizada",
          description: `${p.name} ha sido actualizada correctamente`,
        });
      } else {
        // Insert new
        const { data, error } = await supabase
          .from('plants')
          .insert([{
            name: p.name,
            scientific_name: p.scientific_name,
            description: p.description,
            category: p.category,
            properties: p.properties,
            image: p.image,
            tags: p.tags,
            ailments: p.ailments,
            scientific_article_url: p.scientific_article_url,
            usage_instructions: p.usage_instructions,
            warnings: p.warnings
          }])
          .select()
          .single();

        if (error) throw error;

        setPlants(prev => [data, ...prev]);
        toast({
          title: "Planta creada",
          description: `${p.name} ha sido a√±adida al cat√°logo`,
        });
      }

      setOpen(false);
      setEditing(null);
    } catch (error: any) {
      console.error('Error saving plant:', error);
      toast({
        title: "Error al guardar",
        description: error.message,
        variant: "destructive"
      });
    }
  };

  const remove = async (id: string, name: string) => {
    setDeleteDialog({ open: true, id, name });
  };

  const confirmDelete = async () => {
    try {
      const { error } = await supabase
        .from('plants')
        .delete()
        .eq('id', deleteDialog.id);

      if (error) throw error;

      setPlants(prev => prev.filter(p => p.id !== deleteDialog.id));
      toast({
        title: "Planta eliminada",
        description: `${deleteDialog.name} ha sido eliminada correctamente`,
      });
      setDeleteDialog({ open: false, id: "", name: "" });
    } catch (error: any) {
      console.error('Error deleting plant:', error);
      toast({
        title: "Error al eliminar",
        description: error.message,
        variant: "destructive"
      });
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Cargando plantas...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between flex-wrap gap-4">
        <div>
          <h2 className="text-2xl font-bold flex items-center gap-2">
            <Leaf className="h-7 w-7" />
            Gesti√≥n de Plantas
          </h2>
          <p className="text-muted-foreground mt-1">
            Total de plantas en el cat√°logo: <span className="font-bold">{plants.length}</span>
          </p>
        </div>
        <motion.button
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
          onClick={() => { setEditing(null); setOpen(true); }}
          className="btn flex items-center gap-2"
        >
          <Plus className="h-4 w-4" />
          Nueva Planta
        </motion.button>
      </div>

      {/* Search Bar */}
      <div className="relative max-w-md">
        <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
        <input
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          placeholder="Buscar por nombre, categor√≠a o propiedades..."
          className="input pl-10 w-full"
        />
      </div>

      {/* Plants Table */}
      <div className="rounded-xl border border-border bg-card overflow-hidden">
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-muted/50 border-b border-border">
              <tr>
                <th className="text-left p-4 font-semibold">Planta</th>
                <th className="text-left p-4 font-semibold">Categor√≠a</th>
                <th className="text-left p-4 font-semibold">Propiedades</th>
                <th className="text-center p-4 font-semibold">Acciones</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-border">
              {filtered.length === 0 ? (
                <tr>
                  <td colSpan={4} className="p-12 text-center">
                    <Leaf className="h-12 w-12 text-muted-foreground mx-auto mb-3" />
                    <p className="text-muted-foreground">
                      {query ? "No se encontraron plantas" : "No hay plantas registradas"}
                    </p>
                  </td>
                </tr>
              ) : (
                filtered.map((plant, index) => (
                  <motion.tr
                    key={plant.id}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.05 }}
                    className="hover:bg-muted/30 transition-colors"
                  >
                    <td className="p-4">
                      <div className="flex items-center gap-3">
                        <div className="w-12 h-12 rounded-lg bg-muted overflow-hidden flex-shrink-0 relative border border-border">
                          {plant.image && plant.image.trim() !== '' ? (
                            <>
                              <img 
                                src={plant.image.trim()} 
                                alt={plant.name}
                                loading="lazy"
                                className="w-full h-full object-cover" 
                                onLoad={(e) => {
                                  console.log('‚úÖ Image loaded successfully:', plant.name, plant.image);
                                  e.currentTarget.style.display = 'block';
                                }}
                                onError={(e) => {
                                  console.error('‚ùå Error loading image for', plant.name, ':', plant.image);
                                  e.currentTarget.style.display = 'none';
                                  const parent = e.currentTarget.parentElement;
                                  if (parent) {
                                    const fallback = parent.querySelector('.fallback-icon') as HTMLElement;
                                    if (fallback) fallback.style.display = 'flex';
                                  }
                                }}
                                style={{ display: 'block' }}
                              />
                              <div 
                                className="fallback-icon w-full h-full flex items-center justify-center absolute inset-0 bg-muted"
                                style={{ display: 'none' }}
                              >
                                <ImageIcon className="h-5 w-5 text-muted-foreground" />
                              </div>
                            </>
                          ) : (
                            <div className="w-full h-full flex items-center justify-center bg-muted">
                              <ImageIcon className="h-5 w-5 text-muted-foreground" />
                            </div>
                          )}
                        </div>
                        <div className="flex-1 min-w-0">
                          <p className="font-medium truncate">{plant.name}</p>
                          <p className="text-xs text-muted-foreground italic truncate">{plant.scientific_name}</p>
                          {plant.image && plant.image.trim() !== '' && (
                            <p className="text-[10px] text-muted-foreground/60 truncate mt-0.5" title={plant.image}>
                              üñºÔ∏è {plant.image.substring(0, 40)}...
                            </p>
                          )}
                        </div>
                      </div>
                    </td>
                    <td className="p-4">
                      <span className="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-green-500/10 text-green-500 border border-green-500/20">
                        {plant.category || "Sin categor√≠a"}
                      </span>
                    </td>
                    <td className="p-4">
                      <p className="text-sm text-muted-foreground line-clamp-2">
                        {plant.properties || plant.description || "Sin propiedades"}
                      </p>
                    </td>
                    <td className="p-4">
                      <div className="flex items-center justify-center gap-2">
                        {plant.scientific_article_url && (
                          <motion.a
                            whileHover={{ scale: 1.1 }}
                            whileTap={{ scale: 0.9 }}
                            href={plant.scientific_article_url}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="p-2 rounded-lg hover:bg-purple-500/10 text-purple-500 transition-colors"
                            title="Ver art√≠culo cient√≠fico"
                          >
                            <ExternalLink className="h-4 w-4" />
                          </motion.a>
                        )}
                        <motion.button
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          onClick={() => { 
                            console.log('‚úèÔ∏è Editando planta:', plant.name);
                            console.log('üìñ usage_instructions en plant:', plant.usage_instructions);
                            console.log('‚ö†Ô∏è warnings en plant:', plant.warnings);
                            console.log('üî¨ scientific_article_url en plant:', plant.scientific_article_url);
                            setEditing(plant); 
                            setOpen(true); 
                          }}
                          className="p-2 rounded-lg hover:bg-blue-500/10 text-blue-500 transition-colors"
                          title="Editar planta"
                        >
                          <Edit className="h-4 w-4" />
                        </motion.button>

                        <motion.button
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          onClick={() => remove(plant.id, plant.name)}
                          className="p-2 rounded-lg hover:bg-red-500/10 text-red-500 transition-colors"
                          title="Eliminar planta"
                        >
                          <Trash2 className="h-4 w-4" />
                        </motion.button>
                      </div>
                    </td>
                  </motion.tr>
                ))
              )}
            </tbody>
          </table>
        </div>
      </div>

      <Modal open={open} onClose={() => setOpen(false)}>
        <PlantEditor initial={editing || undefined} onSave={upsert} />
      </Modal>

      <ConfirmDialog
        open={deleteDialog.open}
        onClose={() => setDeleteDialog({ open: false, id: "", name: "" })}
        onConfirm={confirmDelete}
        title="¬øEliminar planta?"
        description={`¬øEst√°s seguro de que quieres eliminar "${deleteDialog.name}"? Esta acci√≥n no se puede deshacer.`}
        confirmText="S√≠, eliminar"
        cancelText="Cancelar"
        variant="danger"
        icon="delete"
      />
    </div>
  );
}

function PlantEditor({ initial, onSave }: { initial?: Partial<Plant>; onSave: (p: Plant) => void }) {
  const [v, setV] = useState<Partial<Plant>>({ ...initial });
  const [imagePreview, setImagePreview] = useState<string | null>(initial?.image || null);
  const [imageError, setImageError] = useState<boolean>(false);
  const [uploading, setUploading] = useState<boolean>(false);
  const [categories, setCategories] = useState<string[]>([]);
  const [tags, setTags] = useState<string[]>([]);
  const [ailments, setAilments] = useState<string[]>([]);
  const { toast } = useToast();

  // Actualizar estado cuando cambia la planta que se est√° editando
  useEffect(() => {
    console.log('üîÑ Actualizando formulario con initial:', initial);
    console.log('üìñ initial.usage_instructions:', initial?.usage_instructions);
    console.log('‚ö†Ô∏è initial.warnings:', initial?.warnings);
    console.log('üî¨ initial.scientific_article_url:', initial?.scientific_article_url);
    setV({ ...initial });
    setImagePreview(initial?.image || null);
  }, [initial]);

  // Cargar categor√≠as, tags y ailments desde Supabase
  useEffect(() => {
    const loadOptions = async () => {
      try {
        // Cargar desde las nuevas tablas si existen, sino usar valores por defecto
        const [categoriesRes, tagsRes, ailmentsRes] = await Promise.all([
          supabase.from('plant_categories').select('name').order('display_order'),
          supabase.from('plant_tags').select('name').order('display_order'),
          supabase.from('plant_ailments').select('name').order('display_order')
        ]);

        // Si las tablas existen y tienen datos, usarlos
        if (categoriesRes.data && categoriesRes.data.length > 0) {
          setCategories(categoriesRes.data.map(c => c.name));
        } else {
          // Fallback: usar valores hardcodeados si las tablas no existen
          setCategories([
            "Hierbas", "√Årboles", "Arbustos", "Flores", "Enredaderas",
            "Suculentas", "Helechos", "Plantas Acu√°ticas", "Cactus",
            "Medicinales", "Arom√°ticas", "Comestibles"
          ]);
        }

        if (tagsRes.data && tagsRes.data.length > 0) {
          setTags(tagsRes.data.map(t => t.name));
        } else {
          setTags([
            "Medicinal", "Arom√°tica", "Comestible", "Decorativa",
            "Antiinflamatoria", "Digestiva", "Relajante", "Antioxidante",
            "Antibacteriana", "Analg√©sica", "Cicatrizante", "Depurativa",
            "Diur√©tica", "Expectorante", "Sedante", "Estimulante",
            "T√≥nica", "Antiespasm√≥dica", "Antis√©ptica", "Febr√≠fuga"
          ]);
        }

        if (ailmentsRes.data && ailmentsRes.data.length > 0) {
          setAilments(ailmentsRes.data.map(a => a.name));
        } else {
          setAilments([
            "Dolor de cabeza", "Dolor de est√≥mago", "Insomnio", "Ansiedad",
            "Estr√©s", "Tos", "Resfriado", "Gripe", "Fiebre", "N√°useas",
            "Diarrea", "Estre√±imiento", "Acidez estomacal", "Inflamaci√≥n",
            "Artritis", "Dolor muscular", "Heridas", "Quemaduras", "Acn√©",
            "Dermatitis", "Presi√≥n arterial alta", "Colesterol alto",
            "Diabetes", "Retenci√≥n de l√≠quidos"
          ]);
        }
      } catch (error) {
        console.error('Error loading options:', error);
        // Si hay error, usar valores por defecto
        setCategories([
          "Hierbas", "√Årboles", "Arbustos", "Flores", "Enredaderas",
          "Suculentas", "Helechos", "Plantas Acu√°ticas", "Cactus",
          "Medicinales", "Arom√°ticas", "Comestibles"
        ]);
        setTags([
          "Medicinal", "Arom√°tica", "Comestible", "Decorativa",
          "Antiinflamatoria", "Digestiva", "Relajante", "Antioxidante",
          "Antibacteriana", "Analg√©sica", "Cicatrizante", "Depurativa",
          "Diur√©tica", "Expectorante", "Sedante", "Estimulante",
          "T√≥nica", "Antiespasm√≥dica", "Antis√©ptica", "Febr√≠fuga"
        ]);
        setAilments([
          "Dolor de cabeza", "Dolor de est√≥mago", "Insomnio", "Ansiedad",
          "Estr√©s", "Tos", "Resfriado", "Gripe", "Fiebre", "N√°useas",
          "Diarrea", "Estre√±imiento", "Acidez estomacal", "Inflamaci√≥n",
          "Artritis", "Dolor muscular", "Heridas", "Quemaduras", "Acn√©",
          "Dermatitis", "Presi√≥n arterial alta", "Colesterol alto",
          "Diabetes", "Retenci√≥n de l√≠quidos"
        ]);
      }
    };

    loadOptions();
  }, []);

  // Validar y previsualizar imagen cuando cambia la URL

  // Validar y previsualizar imagen cuando cambia la URL
  const handleImageChange = (url: string) => {
    const trimmedUrl = url.trim();
    setV({ ...v, image: trimmedUrl });
    setImageError(false);
    
    if (trimmedUrl) {
      console.log('üîç Testing image URL:', trimmedUrl);
      setImagePreview(trimmedUrl);
    } else {
      setImagePreview(null);
    }
  };

  // Subir archivo a Supabase Storage
  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    console.log('üìÅ File selected:', file.name, file.type, file.size);

    // Validar tipo de archivo
    if (!file.type.startsWith('image/')) {
      alert('‚ùå Por favor selecciona un archivo de imagen v√°lido');
      return;
    }

    // Validar tama√±o (5MB m√°ximo)
    if (file.size > 5 * 1024 * 1024) {
      alert('‚ùå La imagen es muy grande. M√°ximo 5MB');
      return;
    }

    // Mostrar preview inmediato del archivo local
    const reader = new FileReader();
    reader.onload = (e) => {
      const localUrl = e.target?.result as string;
      setImagePreview(localUrl);
      console.log('üëÅÔ∏è Local preview loaded');
    };
    reader.readAsDataURL(file);

    setUploading(true);
    setImageError(false);

    try {
      // Generar nombre √∫nico para el archivo
      const fileExt = file.name.split('.').pop();
      const timestamp = Date.now();
      const random = Math.random().toString(36).substring(2, 15);
      const fileName = `${timestamp}_${random}.${fileExt}`;
      const filePath = `plants/${fileName}`;

      console.log('üì§ Uploading file to Supabase:', filePath);

      // Subir a Supabase Storage
      const { data, error } = await supabase.storage
        .from('plant-images')
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false
        });

      if (error) {
        console.error('‚ùå Supabase upload error:', error);
        throw error;
      }

      console.log('‚úÖ Uploaded to Supabase:', data);

      // Obtener URL p√∫blica
      const { data: publicUrlData } = supabase.storage
        .from('plant-images')
        .getPublicUrl(filePath);

      const publicUrl = publicUrlData.publicUrl;
      console.log('üåê Public URL:', publicUrl);

      // Actualizar estado con URL p√∫blica
      setV({ ...v, image: publicUrl });
      setImagePreview(publicUrl);
      setImageError(false);

      toast({
        title: "‚úÖ Imagen subida",
        description: "La imagen se ha subido correctamente a Supabase",
      });

    } catch (error: any) {
      console.error('‚ùå Upload error:', error);
      setImageError(true);
      
      if (error.message?.includes('new row violates row-level security') || error.message?.includes('row-level security')) {
        toast({
          title: "‚ùå Error de permisos",
          description: "No tienes permisos para subir im√°genes. Verifica las pol√≠ticas RLS del bucket.",
          variant: "destructive"
        });
      } else {
        toast({
          title: "‚ùå Error al subir",
          description: error.message || "No se pudo subir la imagen",
          variant: "destructive"
        });
      }
    } finally {
      setUploading(false);
    }
  };

  return (
    <div className="space-y-4">
      {/* T√≠tulo del formulario */}
      <div className="pb-3 border-b border-border">
        <h3 className="text-xl font-bold flex items-center gap-2">
          {initial ? (
            <>
              <Edit className="h-5 w-5 text-blue-500" />
              Editar Planta
            </>
          ) : (
            <>
              <Plus className="h-5 w-5 text-green-500" />
              Nueva Planta
            </>
          )}
        </h3>
        <p className="text-sm text-muted-foreground mt-1">
          {initial ? 'Modifica los datos de la planta' : 'Completa la informaci√≥n de la nueva planta'}
        </p>
      </div>

      <form
        className="space-y-4"
        onSubmit={(e) => {
          e.preventDefault();
          if (!v.name || !v.scientific_name) return;
          
          // DEBUG: Ver el estado completo antes de guardar
          console.log('üìù Estado completo del formulario (v):', v);
          console.log('üìñ v.usage_instructions:', v.usage_instructions);
          console.log('‚ö†Ô∏è v.warnings:', v.warnings);
          console.log('üî¨ v.scientific_article_url:', v.scientific_article_url);
          
          const cleanedImage = v.image?.trim() || undefined;
          console.log('üíæ Saving plant with image:', cleanedImage);
        
        // Generar UUID compatible con todos los navegadores
        const generateId = () => {
          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {
            const r = Math.random() * 16 | 0;
            const v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
          });
        };
        
        onSave({
          id: v.id || generateId(),
          name: v.name,
          scientific_name: v.scientific_name,
          description: v.description || "",
          category: v.category || "Hierbas",
          properties: v.properties || "",
          image: cleanedImage,
          scientific_article_url: v.scientific_article_url?.trim() || null,
          tags: v.tags || [],
          ailments: v.ailments || [],
          usage_instructions: v.usage_instructions?.trim() || null,
          warnings: v.warnings?.trim() || null
        });
      }}
    >
      <div className="grid sm:grid-cols-2 gap-3">
        <input className="input" placeholder="Nombre *" required value={v.name || ""} onChange={(e) => setV({ ...v, name: e.target.value })} />
        <input className="input" placeholder="Nombre cient√≠fico *" required value={v.scientific_name || ""} onChange={(e) => setV({ ...v, scientific_name: e.target.value })} />
      </div>
      
      <div>
        <label className="text-sm font-medium text-foreground mb-2 block">Categor√≠a *</label>
        <select 
          className="input w-full"
          value={v.category || "Hierbas"}
          onChange={(e) => setV({ ...v, category: e.target.value })}
          required
        >
          {categories.map(cat => (
            <option key={cat} value={cat}>{cat}</option>
          ))}
        </select>
      </div>

      {/* Campo de imagen mejorado con preview y upload */}
      <div className="space-y-3">
        <label className="text-sm font-medium text-foreground">Imagen de la Planta</label>
        
        {/* Opci√≥n 1: Subir archivo */}
        <div className={`border-2 border-dashed rounded-lg p-4 transition-all ${
          uploading ? 'border-blue-500 bg-blue-500/5' : 'border-border hover:border-primary/50'
        }`}>
          <div className="flex flex-col items-center gap-2">
            {uploading ? (
              <>
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
                <p className="text-sm font-medium text-primary">Subiendo imagen...</p>
              </>
            ) : (
              <>
                <ImageIcon className="h-8 w-8 text-muted-foreground" />
                <p className="text-sm font-medium">Subir imagen desde tu computadora</p>
              </>
            )}
            <p className="text-xs text-muted-foreground text-center">
              JPG, PNG, WEBP, GIF - M√°ximo 5MB
            </p>
            <input
              type="file"
              accept="image/*"
              onChange={handleFileUpload}
              disabled={uploading}
              className="hidden"
              id="file-upload"
            />
            <label
              htmlFor="file-upload"
              className={`btn mt-2 ${uploading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer hover:scale-105'} transition-transform`}
            >
              {uploading ? '‚è≥ Subiendo...' : imagePreview ? '‚úÖ Cambiar imagen' : 'üì§ Seleccionar archivo'}
            </label>
          </div>
        </div>

        {/* Separador */}
        <div className="relative">
          <div className="absolute inset-0 flex items-center">
            <div className="w-full border-t border-border"></div>
          </div>
          <div className="relative flex justify-center text-xs uppercase">
            <span className="bg-background px-2 text-muted-foreground">O usa una URL</span>
          </div>
        </div>

        {/* Opci√≥n 2: URL externa */}
        <input 
          className="input" 
          placeholder="https://ejemplo.com/imagen.jpg" 
          value={v.image || ""} 
          onChange={(e) => handleImageChange(e.target.value)}
          disabled={uploading}
        />
        
        {/* Preview de la imagen */}
        {imagePreview && (
          <div className="mt-3 p-3 border border-border rounded-lg bg-muted/30">
            <p className="text-xs font-medium mb-2">Vista previa:</p>
            <div className="flex items-center gap-3">
              <div className="w-20 h-20 rounded-lg overflow-hidden border-2 border-border bg-muted relative">
                <img
                  src={imagePreview}
                  alt="Preview"
                  className="w-full h-full object-cover"
                  onLoad={() => {
                    setImageError(false);
                    console.log('‚úÖ Preview loaded successfully');
                  }}
                  onError={(e) => {
                    setImageError(true);
                    console.error('‚ùå Preview failed to load');
                    e.currentTarget.style.display = 'none';
                  }}
                />
                {imageError && (
                  <div className="absolute inset-0 flex items-center justify-center bg-red-500/10">
                    <p className="text-xs text-red-500 text-center p-2">‚ùå Error</p>
                  </div>
                )}
              </div>
              <div className="flex-1 text-xs">
                {imageError ? (
                  <p className="text-red-500">‚ö†Ô∏è No se pudo cargar la imagen. Verifica la URL.</p>
                ) : (
                  <p className="text-green-500">‚úÖ Imagen cargada correctamente</p>
                )}
              </div>
            </div>
          </div>
        )}
      </div>

      <textarea className="input h-20" placeholder="Descripci√≥n" value={v.description || ""} onChange={(e) => setV({ ...v, description: e.target.value })} />
      <textarea className="input h-16" placeholder="Propiedades" value={v.properties || ""} onChange={(e) => setV({ ...v, properties: e.target.value })} />
      
      <div>
        <label className="text-sm font-medium text-foreground flex items-center gap-2 mb-2">
          üî¨ Art√≠culo Cient√≠fico (Opcional)
        </label>
        <input 
          className="input" 
          placeholder="https://www.ncbi.nlm.nih.gov/pmc/articles/..." 
          value={v.scientific_article_url || ""} 
          onChange={(e) => setV({ ...v, scientific_article_url: e.target.value })}
          type="url"
        />
        <p className="text-xs text-muted-foreground mt-1">
          URL del estudio o art√≠culo cient√≠fico sobre esta planta
        </p>
      </div>
      
      <div>
        <label className="text-sm font-medium text-foreground mb-2 block">
          üè∑Ô∏è Tags (Selecciona los que apliquen)
        </label>
        <div className="border border-border rounded-lg p-4 max-h-60 overflow-y-auto bg-muted/30">
          <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
            {tags.map(tag => {
              const isSelected = v.tags?.includes(tag) || false;
              return (
                <label 
                  key={tag}
                  className={`flex items-center gap-2 p-2 rounded-lg cursor-pointer transition-all border ${
                    isSelected 
                      ? 'bg-primary/10 border-primary text-primary font-medium' 
                      : 'bg-background border-border hover:bg-muted hover:border-primary/50'
                  }`}
                >
                  <input
                    type="checkbox"
                    checked={isSelected}
                    onChange={(e) => {
                      const newTags = e.target.checked
                        ? [...(v.tags || []), tag]
                        : (v.tags || []).filter(t => t !== tag);
                      setV({ ...v, tags: newTags });
                    }}
                    className="w-4 h-4 rounded border-gray-300 text-primary focus:ring-primary"
                  />
                  <span className="text-sm">{tag}</span>
                </label>
              );
            })}
          </div>
          {v.tags && v.tags.length > 0 && (
            <div className="mt-3 pt-3 border-t border-border">
              <p className="text-xs text-muted-foreground mb-2">
                Seleccionados ({v.tags.length}):
              </p>
              <div className="flex flex-wrap gap-2">
                {v.tags.map(tag => (
                  <span 
                    key={tag}
                    className="inline-flex items-center gap-1 px-2.5 py-1 rounded-full text-xs font-medium bg-primary/10 text-primary border border-primary/20"
                  >
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
      
      <div>
        <label className="text-sm font-medium text-foreground mb-2 block">
          üíä Dolencias que trata (Selecciona las que apliquen)
        </label>
        <div className="border border-border rounded-lg p-4 max-h-60 overflow-y-auto bg-muted/30">
          <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
            {ailments.map(ailment => {
              const isSelected = v.ailments?.includes(ailment) || false;
              return (
                <label 
                  key={ailment}
                  className={`flex items-center gap-2 p-2 rounded-lg cursor-pointer transition-all border ${
                    isSelected 
                      ? 'bg-green-500/10 border-green-500 text-green-600 font-medium' 
                      : 'bg-background border-border hover:bg-muted hover:border-green-500/50'
                  }`}
                >
                  <input
                    type="checkbox"
                    checked={isSelected}
                    onChange={(e) => {
                      const newAilments = e.target.checked
                        ? [...(v.ailments || []), ailment]
                        : (v.ailments || []).filter(a => a !== ailment);
                      setV({ ...v, ailments: newAilments });
                    }}
                    className="w-4 h-4 rounded border-gray-300 text-green-600 focus:ring-green-600"
                  />
                  <span className="text-sm">{ailment}</span>
                </label>
              );
            })}
          </div>
          {v.ailments && v.ailments.length > 0 && (
            <div className="mt-3 pt-3 border-t border-border">
              <p className="text-xs text-muted-foreground mb-2">
                Seleccionadas ({v.ailments.length}):
              </p>
              <div className="flex flex-wrap gap-2">
                {v.ailments.map(ailment => (
                  <span 
                    key={ailment}
                    className="inline-flex items-center gap-1 px-2.5 py-1 rounded-full text-xs font-medium bg-green-500/10 text-green-600 border border-green-500/20"
                  >
                    {ailment}
                  </span>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
      
      {/* √çndice Bot√°nico: Instrucciones de Uso */}
      <div>
        <label className="text-sm font-medium text-foreground flex items-center gap-2 mb-2">
          üìñ Instrucciones de Uso (√çndice Bot√°nico)
        </label>
        <textarea 
          className="input h-32" 
          placeholder="Ejemplo:&#10;‚Ä¢ Hervir 200ml de agua&#10;‚Ä¢ A√±adir 1-2 cucharaditas de la planta&#10;‚Ä¢ Dejar reposar 5-10 minutos&#10;‚Ä¢ Colar y beber tibio&#10;&#10;Puedes usar saltos de l√≠nea y vi√±etas para mejor formato."
          value={v.usage_instructions || ""} 
          onChange={(e) => {
            console.log('üìñ Escribiendo usage_instructions:', e.target.value);
            setV({ ...v, usage_instructions: e.target.value });
          }}
        />
        <p className="text-xs text-muted-foreground mt-1">
          Instrucciones de preparaci√≥n y uso. Este contenido aparecer√° en el √çndice Bot√°nico de la planta.
        </p>
      </div>

      {/* √çndice Bot√°nico: Advertencias */}
      <div>
        <label className="text-sm font-medium text-foreground flex items-center gap-2 mb-2">
          ‚ö†Ô∏è Advertencias y Precauciones (√çndice Bot√°nico)
        </label>
        <textarea 
          className="input h-32" 
          placeholder="Ejemplo:&#10;‚Ä¢ No consumir durante el embarazo o lactancia&#10;‚Ä¢ Consultar con un m√©dico si est√°s tomando otros medicamentos&#10;‚Ä¢ No exceder la dosis recomendada&#10;‚Ä¢ Puede causar somnolencia&#10;&#10;Lista todas las precauciones importantes."
          value={v.warnings || ""} 
          onChange={(e) => {
            console.log('‚ö†Ô∏è Escribiendo warnings:', e.target.value);
            setV({ ...v, warnings: e.target.value });
          }}
        />
        <p className="text-xs text-muted-foreground mt-1">
          Advertencias, contraindicaciones y precauciones. Este contenido aparecer√° en el √çndice Bot√°nico de la planta.
        </p>
      </div>
      
      <button className="btn w-full" type="submit" disabled={uploading}>
        {uploading ? '‚è≥ Procesando...' : 'üíæ Guardar Planta'}
      </button>
    </form>
    </div>
  );
}
